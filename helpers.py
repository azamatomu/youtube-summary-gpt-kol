import pandas as pd

from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import TextFormatter

from summarizer import summarize_with_gpt



def get_video_transcript(videoId):

    # retrieve the available transcripts
    transcript_list = YouTubeTranscriptApi.list_transcripts(videoId)
    tmp_text = None

    # iterate over all available transcripts
    for transcript in transcript_list:
        # the Transcript object provides metadata properties
        print(
            transcript.video_id,
            transcript.language,
            transcript.language_code,
            # whether it has been manually created or generated by YouTube
            transcript.is_generated,
            # whether this transcript can be translated or not
            transcript.is_translatable,
            # a list of languages the transcript can be translated to
            # transcript.translation_languages,
        )

        # # fetch the actual transcript data
        if transcript.language_code == 'en':
            print('in1')
            if not transcript.is_generated:
                print('in2')
                text = ' '.join([t['text'].replace('\n', ' ') for t in transcript.fetch()])
                return text
            else:
                tmp_text = transcript.fetch()
                text = ' '.join([t['text'].replace('\n', ' ') for t in tmp_text])
                continue

    if tmp_text is not None:
        return text

def save_data(videoId, comment, transcript, app_version):
	# with open('db.csv', 'r') as file:
	file = 'db.csv'
	db_df = pd.read_csv(file)
	row = [{'videoId': videoId, 'transcript': transcript, 'summary': comment, 'summary_version': app_version}]
	pd.concat([db_df, pd.DataFrame(row)]).to_csv(file, index=False)

	return

def insert_comment(videoId, youtube):
    transcript = get_video_transcript(videoId)
    print(transcript)
    comment = summarize_with_gpt(transcript)
    print(comment)

    yt_request = youtube.commentThreads().insert(
        part="snippet",
        body={
          "snippet": {
            "videoId": videoId,
            "topLevelComment": {
              "snippet": {
                "textOriginal": comment
              }
            }
          }
        }
    )

    return yt_request, comment, transcript